# main.tf

locals {
  is_mysql = var.engine == "mysql"
  engine_version = local.is_mysql ? var.mysql_engine_version : var.postgresql_engine_version
  engine_family = local.is_mysql ? "mysql" : "postgres"
  port = local.is_mysql ? 3306 : 5432
}

# Secret Manager for database credentials
resource "aws_secretsmanager_secret" "db_secret" {
  name = "${var.environment}-${var.identifier}-credentials"
  description = "Credentials for RDS instance ${var.identifier}"

  tags = merge(var.tags, {
    Environment = var.environment
    ManagedBy = "terraform"
  })

  # Enable automatic rotation every 30 days
  rotation_rules {
    automatically_after_days = 30
  }


}

# Generate initial random password
resource "random_password" "master_password" {
  length           = 32
  special          = true
  override_special = "!#$%^&*()-_=+[]{}<>:?"
}

# Store initial secret
resource "aws_secretsmanager_secret_version" "db_secret_initial" {
  secret_id = aws_secretsmanager_secret.db_secret.id
  secret_string = jsonencode({
    username = var.master_username
    password = random_password.master_password.result
    engine   = var.engine
    host     = aws_db_instance.this.endpoint
    port     = local.port
    dbname   = var.database_name
  })
}

# RDS Instance
resource "aws_db_instance" "this" {
  identifier = var.identifier
  engine    = var.engine
  engine_version = local.engine_version
  instance_class = var.instance_class

  # Storage configuration
  allocated_storage = var.allocated_storage
  max_allocated_storage = var.max_allocated_storage
  storage_type = "gp3"
  storage_encrypted = true
  kms_key_id = var.kms_key_arn

  # Network configuration
  db_subnet_group_name = aws_db_subnet_group.this.name
  vpc_security_group_ids = [aws_security_group.this.id]
  publicly_accessible = false

  # Authentication
  username = var.master_username
  password = random_password.master_password.result
  iam_database_authentication_enabled = true

  # Database configuration
  db_name = var.database_name
  port    = local.port

  # Backup and maintenance
  backup_retention_period = var.backup_retention_period
  backup_window = var.backup_window
  maintenance_window = var.maintenance_window
  copy_tags_to_snapshot = true
  deletion_protection = true
  skip_final_snapshot = false
  final_snapshot_identifier = "${var.identifier}-final-snapshot"

  # Monitoring
  monitoring_interval = 5
  monitoring_role_arn = aws_iam_role.rds_monitoring.arn
  enabled_cloudwatch_logs_exports = local.is_mysql ? ["audit", "error", "general", "slowquery"] : ["postgresql", "upgrade"]
  performance_insights_enabled = true
  performance_insights_retention_period = 7
  performance_insights_kms_key_id = var.kms_key_arn

  # Parameter group
  parameter_group_name = aws_db_parameter_group.this.name

  # Auto minor version upgrade
  auto_minor_version_upgrade = true

  tags = merge(var.tags, {
    Environment = var.environment
    ManagedBy = "terraform"
  })
}

# Security Group
resource "aws_security_group" "this" {
  name_prefix = "${var.identifier}-sg"
  vpc_id      = var.vpc_id

  ingress {
    from_port = local.port
    to_port   = local.port
    protocol  = "tcp"
    cidr_blocks = var.allowed_cidr_blocks
    description = "Allow inbound database traffic"
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    description = "Allow all outbound traffic"
  }

  tags = merge(var.tags, {
    Name = "${var.identifier}-sg"
    Environment = var.environment
  })
}

# Subnet Group
resource "aws_db_subnet_group" "this" {
  name_prefix = var.identifier
  subnet_ids  = var.subnet_ids

  tags = merge(var.tags, {
    Environment = var.environment
  })
}

# Parameter Group
resource "aws_db_parameter_group" "this" {
  name_prefix = var.identifier
  family      = "${local.engine_family}${split(".", local.engine_version)[0]}"

  dynamic "parameter" {
    for_each = local.is_mysql ? var.mysql_parameters : var.postgresql_parameters
    content {
      name  = parameter.value.name
      value = parameter.value.value
    }
  }

  tags = merge(var.tags, {
    Environment = var.environment
  })
}

# Enhanced Monitoring IAM Role
resource "aws_iam_role" "rds_monitoring" {
  name_prefix = "${var.identifier}-monitoring"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "monitoring.rds.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "rds_monitoring" {
  role       = aws_iam_role.rds_monitoring.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AmazonRDSEnhancedMonitoringRole"
}